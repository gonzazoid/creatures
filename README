NOTE: This program is copyrighted material, property  of the University of
Birmingham and (quite possibly) the University of Portsmouth. It is made
available for educational and academic purposes ONLY.



First of all: By default, the system only uses all possible external sensors,
including sensors for detecting the ball. If you don't use a box/ball in your
program, then you don't need ball-specific sensors. To deactivate the sensors
targeted at the ball, find out the portion where SENSORTYPES and NBSENSORTYPES
are set, and uncomment the appropriate version (commenting out the default one,
of course).



The file "animat.h" contains the entire machinery of creatures. "sphere.h"
contains parts specifically related to spherical environments. If you want to
modify animat.h, BE SURE TO READ THE REMAINDER OF THIS FILE.  Other files
(*.cpp) contain programs that use the functions and structures contained in
these two files. 

There are two types of programs: with or without graphics. The "readbest"
program (which displays a contest between two creatures) is a program with
graphics, while the "ssga" program (which actually evolves creatures) does not
use graphics. Program with graphics are structured differently from programs
without graphics. This is made necessary by the simple graphics library that
comes with ODE. To see a simple example of a program with graphics, consult
readbest.cpp.


Here is the skeleton of a minimal program without graphics:

main() 
{

Animat A;

OUTPUTREDIRECT = TOSTDOUT; // or TONULL, or TOFILE; see animat.h for details
WORLDTYPE = FLATWORLD; // can also be SPHERICWORLD.  

initWorld(); // initialisation of the simulation

// Initialises A with a random genome - no tests for internal collisions, see
// ssga.cpp or sphere.cpp for a suggestion
A.randGenome(); 

// Inserts A in the simulation
A.generate();

// perform the simulation
for (int i=0; i < 100; i++) doWorld(0, STEP, true);

// remove A from the simulation
A.remove();	

destroyWorld();

}

Internals: 
==========

There is a distinction between the "genome", the "representation", and the
actual array of limbs of a creature.  

- The genome (Animat::genome) contains the actual heritable genetic message of
  the creature.  It is an ORDERED, COMPACT (see below) array of genes. In the
genome, there is no one-to-one correspondence between genes and limbs/neurons
of the actual creature, because developmental instruction may introduce
additional complexity. The genome should only be accessed directly for
reproductive / genetic operations.

- The representation (Animat::repres) contains the fully developed version of
  the genome, after all developmental instructions have been applied. It is
also stored as an ordered, compact array of genes. There is one-to-one
correspondence between each gene of the representation and each limb of the
actual creature. In particular, the representation contains the complete
neural information of the creature, and any access to the neural network
during a creature's lifetime must use the representation (NOT the genome or
the "limbs" array).

- The "limbs" array (Animat::limbs) contains the physical information of the
  limbs of the creature, including the ODE data structures (bodies and geoms).

Each gene contains the information for a limb (or, due to development,
possibly to several limbs), including morphology and neural information. It
also contains the index of the "ancestor" gene (the gene for the limb that is
the ancestor of this limb), in the integer variable "dadnum".  For limb 0 (the
"trunk"), this "dadum" is set to -1.


First and foremost rule of the genome organisation: the genome is an ORDERED,
COMPACT array of "gene" elements. Because the genome is a fixed array,
variable length is achieved by specifying for each gene whether it is "dead"
(i.e. non-existent in this genome) or not. The genome is "compact" because
there can be no "holes" in the genome: A NON-DEAD GENE CAN NEVER FOLLOW A DEAD
GENE. If an operation removes a certain gene, then it must use compress() to
ensure that the genes will be re-compacted. 

The genome is also (semi-)"ordered" in that, within the array, any gene must
come after its ancestor. If limb A is ancestor to limb B, then the gene for A
must have a lower index in the array than the gene for B (the order of genes
that are not ancestral to each other is indifferent). Same thing in the
representation.

These two conventions are relied on throughout the code. Breaking them will
result in undefined behaviour, unless you classify "not what you want" as a
definition. Functions checkGenome() and compress() can be used for
enforcement.

For the rest, the system is essentially as described in the papers and thesis.
The only difference is that in the current implementation, we force the
presence of two sensor neurons in the trunk (one x-sensor and one y-sensor
towards the trunk of the closest other animat), and sensors targeted at other
animats are simple Sims-like x- and y-sensors (the more complex sensor types
are kept for the ball sensors, mostly as an illustration). Essentially the
complex sensors don't seem to bring any improvement over simple x- and
y-sensors.


The central function is doWorld(), the loop function that performs a single
step of the simulation. Another important function called by doWorld() is
Animat::actuate() (which performs a neural activation cycle, including a call
to fillSensors() to update sensor values).


Other utility functions: myprintf() displays a message to whatever
OUTPUTREDIRECT is set to, and makes absolutely sure that it is displayed
(flushing the output); mydie() exits the program after creating an
"exitmessage.txt" file containing the parameter string. displayRepres()
displays the full representation, limb by limb, with both body and neuron
information.


